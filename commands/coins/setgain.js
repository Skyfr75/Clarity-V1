const Discord = require("discord.js")
const ms = require("ms");
const { MessageEmbed, MessageActionRow, MessageSelectMenu, MessageButton } = require('discord.js')
const db = require('quick.db');
const cl = new db.table("Color")
function sleep(ms) {
    return new Promise((resolve) => {
      setTimeout(resolve, ms)})}

      module.exports = {
        name : "setgain",
        run: async(client,message,args,prefix) => {

            let color = cl.fetch(`color_${message.guild.id}`)
            if (color == null) color = client.config.color
               
            if (!message.member.permissions.has("ADMINISTRATOR")) return message.channel.send("**Perm requise - [ADMINISTRATOR]**")

            let money = await db.get(`money_${message.guild.id}_${message.author.id}`)
            if(money === null ) money = 0
           
            const embed = new Discord.MessageEmbed()
            embed.setTitle('Param√®tre des r√©compenses')
            embed.setDescription(`Veuillez choisir les actions avec les r√©actions suivantes:
      1Ô∏è‚É£„ÉªChanger les r√©compense vocal (coins/temps)
      2Ô∏è‚É£„ÉªChanger le nombre de coins gagn√© par message
      3Ô∏è‚É£„ÉªChanger le nombre de coins gagn√© par lancement de cam√©ra
      4Ô∏è‚É£„ÉªChanger le nombre de coins gagn√© par lancement de stream
      5Ô∏è‚É£„ÉªChanger les r√©compense des batiment (coins/temps)
      
      
                       `)
          
                
           
           embed.setColor(color)
           embed.setFooter({text: `Clarity ${client.config.version}` })


           let gainbut = new MessageActionRow()
            .addComponents(
                new MessageButton()
                .setCustomId("chrv")
                .setEmoji("1Ô∏è‚É£")
                .setStyle("SECONDARY")
            )
            .addComponents(
                new MessageButton()
                .setCustomId("chrm")
                .setEmoji("2Ô∏è‚É£")
                .setStyle("SECONDARY")
            )
            .addComponents(
                new MessageButton()
                .setCustomId("chlc")
                .setEmoji("3Ô∏è‚É£")
                .setStyle("SECONDARY")
            )
            .addComponents(
                new MessageButton()
                .setCustomId("chls")
                .setEmoji("4Ô∏è‚É£")
                .setStyle("SECONDARY")
            )
            .addComponents(
                new MessageButton()
                .setCustomId("chrb")
                .setEmoji("5Ô∏è‚É£")
                .setStyle("SECONDARY")
            )

            const msg = await message.channel.send({
                embeds: [embed],
                components: [gainbut]
            
                
            });


            let buybut = new MessageActionRow()
            .addComponents(
                new MessageButton()
                    .setCustomId("cfgb")
                    .setEmoji("‚Äãüçæ")
                    .setStyle("SECONDARY")
                
            )
            .addComponents(
                new MessageButton()
                .setCustomId("cfga")
                .setEmoji("üöò")
                .setStyle("SECONDARY")
            )
            .addComponents(
                new MessageButton()
                .setCustomId("cfgm")
                .setEmoji("üè™")
                .setStyle("SECONDARY")
            )
            .addComponents(
                new MessageButton()
                .setCustomId("cfgc")
                .setEmoji("üìΩÔ∏è")
                .setStyle("SECONDARY")
            )
            .addComponents(
                new MessageButton()
                .setCustomId("cfgr")
                .setEmoji("üöÜ")
                .setStyle("SECONDARY")
            )


            let filter2 = (m) => m.author.id === message.author.id

let filter1 = (i) => i.user.id === message.author.id;




const collector = message.channel.createMessageComponentCollector({
    componentType: "BUTTON",
})

collector.on("collect", async(c) => {
    
    const value = c.customId

    if (value == "chrv") {
        const ez = await message.channel.send(`Veuillez entrer le **nombre de coins gagn√©** en vocal. (*Mettez \`non\` pour le mettre par default*)`)
        let collected = await message.channel.awaitMessages({
            filter: filter2,
            max: 1,
            time: 60000,
            errors: ["time"]
        }).then(cld => {
            if(cld.first().content === "non") {
                ez.delete()
                cld.first().delete()
                db.set(`msg_${message.guild.id}`, null)

                
            }else {
                var msg = cld.first();
        if(isNaN(msg.content)) return  message.channel.send(`Aucun nombre trouv√© pour \`${msg.content}\`.`);
        
        ez.delete()
        cld.first().delete()
                                                  
        db.set(`voc_${message.guild.id}`, msg.content)
            }
        })
    }

    if (value == "chrm") {
        const ez = await message.channel.send(`Veuillez entrer le **nombre de coins gagn√©** par message. (*Mettez \`non\` pour le mettre par default*)`)
        let collected = await message.channel.awaitMessages({
            filter: filter2,
            max: 1,
            time: 60000,
            errors: ["time"]
        }).then(cld => {
            if(cld.first().content === "non") {
                ez.delete()
                cld.first().delete()
                db.set(`msg_${message.guild.id}`, null)

                
            }else {
                var msg = cld.first();
        if(isNaN(msg.content)) return  message.channel.send(`Aucun nombre trouv√© pour \`${msg.content}\`.`);
        
        ez.delete()
        cld.first().delete()
                                                  
        db.set(`voc_${message.guild.id}`, msg.content)
            }
        })
    }

    if (value == "chlc") {
        const ez = await message.channel.send(`Veuillez entrer le **nombre de coins gagn√©** par lancement d"une cam√©ra. (*Mettez \`non\` pour le mettre par default*`)
        let collected = await message.channel.awaitMessages({
            filter: filter2,
            max: 1,
            time: 60000,
            errors: ["time"]
        }).then(cld => {
            if(cld.first().content === "non") {
                ez.delete()
                cld.first().delete()
                db.set(`cam_${message.guild.id}`, null)

                
            }else {
                var msg = cld.first();
        if(isNaN(msg.content)) return  message.channel.send(`Aucun nombre trouv√© pour \`${msg.content}\`.`);
        
        ez.delete()
        cld.first().delete()
                                                  
        db.set(`cam_${message.guild.id}`, msg.content)
            }
        })
    }


    if (value == "chls") {
        const ez = await message.channel.send(`Veuillez entrer le **nombre de coins gagn√©** par lancement d"un stream. (*Mettez \`non\` pour le mettre par default*`)
        let collected = await message.channel.awaitMessages({
            filter: filter2,
            max: 1,
            time: 60000,
            errors: ["time"]
        }).then(cld => {
            if(cld.first().content === "non") {
                ez.delete()
                cld.first().delete()
                db.set(`stream_${message.guild.id}`, null)

                
            }else {
                var msg = cld.first();
        if(isNaN(msg.content)) return  message.channel.send(`Aucun nombre trouv√© pour \`${msg.content}\`.`);
        
        ez.delete()
        cld.first().delete()
                                                  
        db.set(`stream_${message.guild.id}`, msg.content)
            }
        })
    }


    if (value == "chrb") {
        let slm = new MessageEmbed()
        slm.setTitle(`„Éª„Éª„Éª„Éª„Éª`)
        slm.setColor(color)
        slm.setFooter({text: `Clarity ${client.config.version}` })
    
        slm.setDescription(`Veuillez choisir les actions avec les r√©actions suivantes:
        ‚Äãüçæ„ÉªConfigurer le salaire **d'un bar**
        üöò„ÉªConfigurer le salaire **d'un garage**
        üè™„ÉªConfigurer le salaire **d'un magasin**
        üìΩÔ∏è„ÉªConfigurer le salaire **d'un cin√©ma**
        üöÜ„ÉªConfigurer le salaire **d'une gare**

       `)
       msg.edit({embeds: [slm], components: [buybut]})
    }
})



const collectorx = message.channel.createMessageComponentCollector({
    componentType: "BUTTON",
})



collectorx("collect", async(c) => {
    if(value == "cfgb") {
        const ez = await message.channel.send(`Veuillez entrer un **salaire (coins)**. (*Mettez \`non\` pour le mettre par default*)`)
        let collected = await message.channel.awaitMessages({
            filter: filter2,
            max: 1,
            time: 60000,
            errors: ["time"]
        }).then(cld => {
            if(cld.first().content === "non") {
                ez.delete()
                cld.first().delete()
                db.set(`stream_${message.guild.id}`, null)

                
            }else {
                var msg = cld.first();
        if(isNaN(msg.content)) return  message.channel.send(`Aucun nombre trouv√© pour \`${msg.content}\`.`);
        
        ez.delete()
        cld.first().delete()
                                                  
        db.set(`stream_${message.guild.id}`, msg.content)
            }

    })
}
})

           




      }
      }